/*
 select count(avg(note.valoare))  FROM STUDENTI join NOTE on studenti.id=note.id_student where studenti.grupa='A3' and studenti.an=2 group by note.id_student having avg(note.valoare)>7.375;
--management_fac.get_student_info('117AC7');

set serveroutput on;
BEGIN
   -- management_fac.add_student('Gheorghe','Mititelu');
   -- management_fac.get_student_info('980MK1');
   --management_fac.add_student('Craioveanu','Gica');
   --management_fac.get_student_info('553QN6');
   --management_fac.remove_student('100CC2');
   --management_fac.calculeaza_varsta('868VO7');
END;
*/


CREATE OR REPLACE PACKAGE BODY management_fac IS

    nume_facultate VARCHAR2(100) := 'Facultatea de Informatica din IASI';
    

    PROCEDURE calculeaza_varsta(v_stud_nr_matricol studenti.nr_matricol%TYPE) 
        IS 
        v_data_nastere DATE;
        v_days_difference INTEGER;
        v_months_difference INTEGER;
        v_years_difference INTEGER;
        v_current_day DATE;
        BEGIN


        select current_date into v_current_day from dual;
            
        select data_nastere into v_data_nastere from studenti where nr_matricol = v_stud_nr_matricol;
        
         v_years_difference:=FLOOR((v_current_day - v_data_nastere)/365);
         v_months_difference:=months_between(v_current_day,v_data_nastere)-v_years_difference*12;
         
                 
         IF(extract(day from v_current_day)>=extract(day from v_data_nastere))
        THEN
            v_days_difference := extract(day from v_current_day)-extract(day from v_data_nastere)+1;
        ELSE
            v_days_difference := extract(day from v_current_day) + (extract(day from last_day(v_data_nastere-30))- extract(day from v_data_nastere))+1;      
         END IF;
      
         
         DBMS_OUTPUT.PUT_LINE(v_years_difference || ' ani, ' || v_months_difference || ' luni si '|| v_days_difference || ' zile.');
        
        
        END calculeaza_varsta;

    PROCEDURE add_student (v_new_nume studenti.nume%type, v_new_prenume studenti.prenume%type) 
       IS 


            v_new_id_student studenti.id%TYPE;
            v_new_nr_matricol studenti.nr_matricol%TYPE;
            v_max_value studenti.id%TYPE;
            
            v_first_letter char;
            v_second_letter char;
            v_last_number studenti.id%TYPE;

            v_number_of_results integer;


             v_id_curs cursuri.id%TYPE;
            v_nota_valoare note.valoare%TYPE;
            v_nota_id note.id%TYPE;

            v_new_an studenti.an%TYPE;

       
       BEGIN


            select max(id) into v_max_value from studenti ;

            v_new_id_student := v_max_value+1;

            <<generare_nr_matricol>>

            v_new_nr_matricol := (mod(mod(floor(DBMS_RANDOM.VALUE(100,899)),v_new_id_student),100)+100);
            -- new_nr_matricol := 100;
            --new_nr_matricol := (mod(mod(DBMS_RANDOM.VALUE(100,899),new_id_student),100)+100);

            v_first_letter := CHR(mod(26,ASCII(substr(v_new_nume,0,1))-65)+65);
            v_second_letter := CHR(mod(26,ASCII(substr(v_new_prenume,0,1))-65)+65);

            v_last_number := mod(DBMS_RANDOM.VALUE(100,999)/10,10);

            v_new_nr_matricol :=v_new_nr_matricol||v_first_letter||v_second_letter||v_last_number;

            

            select count(nr_matricol) into v_number_of_results from studenti where nr_matricol=v_new_nr_matricol;

            if(v_number_of_results!=0)
            THEN
                GOTO generare_nr_matricol;
            END IF;

            v_new_an:=DBMS_RANDOM.VALUE(1,3);

            insert into studenti values (v_new_id_student,v_new_nr_matricol,v_new_nume,v_new_prenume,v_new_an,'A3',100,to_date('01/01/1990','DD/MM/YYYY'),'','','');
           --DBMS_OUTPUT.PUT_LINE('Exemplu apel functie privata: '|| calculeaza_varsta(to_date('01/01/1990','DD/MM/YYYY')));
          -- DBMS_OUTPUT.PUT_LINE('Aici ar trebui sa scrieti cod pentru adaugarea unui student');



             select max(id) into v_nota_id from note;


            FOR v_cursuri_linie IN (SELECT * FROM cursuri where an=(v_new_an-1)) LOOP
                v_nota_id:=v_nota_id+1;
                v_id_curs := v_cursuri_linie.ID;
                v_nota_valoare := DBMS_RANDOM.VALUE(4,10);
                insert into note values (v_nota_id,v_new_id_student,v_id_curs,v_nota_valoare,null,null,null);
            END LOOP;

    END add_student;

    PROCEDURE remove_student (v_student_nr_matricol studenti.nr_matricol%type) IS
        v_student_id studenti.ID%TYPE;
    BEGIN
    
    select id into v_student_id from studenti where nr_matricol=v_student_nr_matricol and rownum=1;
    
    DELETE FROM note
        WHERE note.id_student=v_student_id;
        
       DELETE FROM studenti
        WHERE NR_MATRICOL=v_student_nr_matricol;
        
        DELETE FROM prieteni
         WHERE (ID_STUDENT1=v_student_id OR ID_STUDENT2=v_student_id);
        
        DBMS_OUTPUT.PUT_LINE('Studentul cu ID-ul ' || v_student_id || ' si NR_MATRICOL ' || v_student_nr_matricol ||' a fost sters din baza de date.');
        
    END remove_student;

    PROCEDURE get_student_info(v_student_nr_matricol studenti.nr_matricol%TYPE) IS

            v_foaie_matricola_sum note.valoare%TYPE;
            v_foaie_matricola_count integer;
            v_student_grupa studenti.grupa%TYPE;
            v_student_pozitie integer;
            v_student_an studenti.an%TYPE;
            v_student_id studenti.ID%TYPE;

    BEGIN


        FOR v_studenti_linie IN (SELECT * FROM studenti where nr_matricol = v_student_nr_matricol and ROWNUM=1)
        LOOP
            v_foaie_matricola_sum:=0;
            v_foaie_matricola_count:=0;
            v_student_id := v_studenti_linie.ID;
            v_student_grupa :=v_studenti_linie.grupa;
            v_student_an := v_studenti_linie.an;
        
            DBMS_OUTPUT.PUT_LINE(v_studenti_linie.nr_matricol || ' - ' || v_studenti_linie.nume || ' - ' || v_studenti_linie.prenume);
            calculeaza_varsta(v_studenti_linie.NR_MATRICOL);
            DBMS_OUTPUT.PUT_LINE('Foaie matricola:');
            
            for v_student_linie_foaie_matricola IN (SELECT * FROM NOTE join cursuri on note.id_curs=cursuri.id where note.id_student=v_studenti_linie.id)
            LOOP
                v_foaie_matricola_sum:=v_foaie_matricola_sum+v_student_linie_foaie_matricola.valoare;
                v_foaie_matricola_count:=v_foaie_matricola_count+1;
                DBMS_OUTPUT.PUT_LINE(v_student_linie_foaie_matricola.titlu_curs || ' ' || v_student_linie_foaie_matricola.valoare);
            END LOOP;
            
            
            DBMS_OUTPUT.PUT_LINE('Media totala: ' || v_foaie_matricola_sum/v_foaie_matricola_count);
            
            
        
        END LOOP;
        
        
        /* PENTRU STUDENTII MAI BUNI */
        
        
        select count(avg(note.valoare)) into v_student_pozitie FROM STUDENTI join NOTE on studenti.id=note.id_student where studenti.grupa=v_student_grupa and studenti.an=v_student_an group by note.id_student having avg(note.valoare)>(v_foaie_matricola_sum/v_foaie_matricola_count);
        
        
        DBMS_OUTPUT.PUT_LINE(' ');
        DBMS_OUTPUT.PUT_LINE('Pozitia in grupa: '||(v_student_pozitie+1));
        
        DBMS_OUTPUT.PUT_LINE(' ');
        DBMS_OUTPUT.PUT_LINE('Lista de prieteni: ');
        
        FOR v_linie_prieteni IN (SELECT * FROM PRIETENI WHERE ID_STUDENT1=v_student_id)
        LOOP
            FOR v_linie_student_prieten IN (SELECT * FROM STUDENTI WHERE ID=v_linie_prieteni.ID_STUDENT2)
            LOOP
                DBMS_OUTPUT.PUT_LINE(v_linie_student_prieten.nume ||' ' || v_linie_student_prieten.PRENUME);
            END LOOP;
        
        END LOOP;

    END get_student_info;
    

END management_fac;

/*
CREATE OR REPLACE PACKAGE management_fac IS
      v_current_day   DATE:= SYSDATE;
      CURSOR lista_studenti IS SELECT nr_matricol, nume, prenume, grupa, an FROM studenti ORDER BY nume;
     PROCEDURE add_student (v_new_nume studenti.nume%type, v_new_prenume studenti.prenume%type);
     PROCEDURE remove_student (v_student_nr_matricol studenti.nr_matricol%type);
     PROCEDURE get_student_info (v_student_nr_matricol studenti.nr_matricol%type);
END management_fac; */

