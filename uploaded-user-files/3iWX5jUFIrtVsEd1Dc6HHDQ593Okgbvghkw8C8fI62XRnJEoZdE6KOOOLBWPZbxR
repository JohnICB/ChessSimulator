
#include <iostream>
#include <random>
#include <time.h>
#include <math.h>
#include <cmath>
#include <vector>
using namespace std;

#define PI 3.14159265

int n;
int F; // numarul functiei alese
double dr, st, st1, dr1, st2, dr2;// (interval limits)
double prec; 
int nr_biti, nr_biti1, nr_biti2;

vector<vector<int> > ULTIMATEminHilltop;
vector<vector<int> > minHilltop;
vector<vector<int> > vecBiti;
vector<int> linieBiti;
vector<double> vecNumere;
//vector<double> vecNRminime;
double fitness, minFitness;
long double ULTIMATEminFitness;

int SETnr_biti(double st, double dr, double prec) {

	int nr_biti;
	double interval_len, nr;
	interval_len = dr-st;
	nr = log2(interval_len*prec);
	nr_biti = ceil(nr); //rotunjim variabila double la cel mai apropiat int
	return nr_biti;
}

int Rand01() {
	int i;
	double nr;
		random_device rd; //obtain a random number from hardware
		mt19937 eng(rd());//seed the generator
		uniform_real_distribution<> distr(0, 1); //define the range

		nr = roundf(distr(eng) * 100) / 100;   //generate random number

		return nr;
}

int randBitPosition() {
	
	//alege rand un numar intre 0 si nr_biti
	//int randNum = rand() % (max - min + 1) + min;
	int randNum = rand() % (nr_biti-1 + 1);
	return randNum;
}
void numberTransformer() {
	int i, j, suma = 0;
	double numar;
	srand(time(NULL));
	vecNumere.clear();
	for (i = 0; i < n; i++)
	{
		/*
		if (F == 4)
		{
			if (i == 0) nr_biti = nr_biti1;
			if (i == 1) nr_biti = nr_biti2;
		}
		*/
		for (j = 0; j < nr_biti; j++)
			suma += vecBiti[i][j] * pow(2, j);

		numar = st + suma*(dr - st) / (pow(2, nr_biti) - 1);

		vecNumere.push_back(numar);
		suma = 0;
	}

}

void FlipBit(int nr_element, int bit) {
	
	int  i, j, suma = 0;
	double numar=0;
	/*
	for (j = 0; j < nr_biti; j++)
		suma += vecBiti[nr_element][j] * pow(2, j);

	//for (i = 0; i < n; i++)
	if (vecBiti[nr_element][bit] == 0)//vrem sa-l facem 1, deci adaugam la suma
		suma += pow(2, bit);
	else suma -= pow(2, bit);//bit e pozitia

	numar = st + suma*(dr - st) / (pow(2, nr_biti) - 1);
	vecNumere[0] = numar;
	*/
	
	
	for (i = 0; i < n; i++)//schimbam toti bitii de pe pozitia bit
	{
		if (vecBiti[i][bit] == 0) 
			vecBiti[i][bit] = 1;
		else vecBiti[i][bit] = 0;
	}
	numberTransformer();
	
}

void nRandArrays() {
	
	vecBiti.clear();
	//srand(time(NULL));
	int i, j;
	for (int i = 0; i < n; i++)
	{
		for (j = 0; j < nr_biti; j++)
		{
			int x; 
			//x = Rand01();
			x = rand() % 2;
			linieBiti.push_back(x);
			//vec[i].push_back(5);

		}
		vecBiti.push_back(linieBiti);
		if (vecBiti.size() == n) break;
		linieBiti.clear();
	}

	numberTransformer();
	//vec[0].push_back(5);
}

double DeJong(vector<double> vecNumere) {

	int i;
	double s = 0;
	for (i = 0; i < n; i++)
		s = s + vecNumere[i] * vecNumere[i];
	return s;
}

double SchwefelFunction(vector<double> vecNumere) {
	int i;
	double f7 = 0;
	for (i = 0; i < n; i++) {
		f7 += (-1)*vecNumere[i] * sin(sqrt(abs(vecNumere[i])));
	}
	//f7(x) = sum(-x(i)·sin(sqrt(abs(x(i))))), i = 1:n;
	return f7;
}

double AckleyFunction(vector<double> vecNumere) {
	
	double a = 20, b = 0.2, c=2*PI, sum2=0, sumcos=0, f10;
	int i;

	for (i = 0; i < n; i++)
	{
		sum2 += pow(vecNumere[i], 2);
		sumcos += cos(c*vecNumere[i]);
	}
		
	f10 = -a*exp(-b*sqrt(1 / n*sum2)) - exp(1 / n*sumcos) + a + exp(1);
	return f10;
}

double SixHumpCamelBack(vector<double> vecNumere) {

	double fSixh;
	fSixh = (4 - 2.1*pow(vecNumere[0], 2) + pow(vecNumere[0], 4/3))*pow(vecNumere[0], 2) +
		vecNumere[0]*vecNumere[1] + (-4 + 4*pow(vecNumere[1], 2))*pow(vecNumere[1], 2);

	//fSixh(x1, x2) = (4 - 2.1·x1 ^ 2 + x1 ^ 4 / 3)·x1 ^ 2 + x1·x2 + (-4 + 4·x2 ^ 2)·x2 ^ 2
		//- 3 <= x1 <= 3, -2 <= x2 <= 2.

	return fSixh;
}

double ComputeFitness(){//nu schimba vectorul de numere

	double fitness;
	//numberTransformer();
	//iei vectorul de Numere si il pui in functie si scoti valoarea
	
	//fitness = DeJong(vecNumere);
	switch (F)
	{
	case 1: {  //1. De Jong's function 1
		fitness = DeJong(vecNumere);
		break;
	}

	case 2: {  //2. Schwefel's function 7
		fitness = SchwefelFunction(vecNumere);
		break;
	}

	case 3: {  //3. Ackley's Path function 10
		fitness = AckleyFunction(vecNumere);
		break;
	}

	case 4: {  //4. Six-hump camel back function
			   //-3 <= x1 <= 3, -2 <= x2 <= 2.
		fitness = SixHumpCamelBack(vecNumere);
		break;
	}

	}

	return fitness;
}

void Steepest_Ascent_Hill_Climbing() {
	
	int i, j, iterations, nr_element, bit, times=0;
	bool increaseFound;
    long double ULTIMATEminFitness;
	
	for (iterations = 0; iterations < 1000; iterations++){

		nRandArrays();//creaza vecBiti si vecNumere
		minFitness = ComputeFitness();
		if (iterations == 0) ULTIMATEminFitness = minFitness;
		increaseFound = true;

		while (increaseFound == true) {//ma opresc cand niciun flip nu mi-a imbunatatit fitnessul

			increaseFound = false;
			
			
			//for (nr_element = 0; nr_element < n; nr_element++)
				for (bit = 0; bit < nr_biti; bit++)
			{
				//double valoareVeche = vecNumere[nr_element];
				nr_element = 0;
				FlipBit(nr_element, bit);
				fitness = ComputeFitness();//pentru noul vecNumere
				/*
				for (i = 0; i < n; i++) {
					for (j = 0; j < nr_biti; j++)
						cout << vecBiti[0][i] << " ";
					cout << '\n';
				}
				cout << '\n';
				*/
				
				if (fitness < minFitness) {// FlipBit a dat o valoare mai buna
					minFitness = fitness;
					/*
					if (vecBiti[nr_element][bit] == 0)//abia acum schimb cu adevarat vecBiti
						vecBiti[nr_element][bit] = 1;
					else vecBiti[nr_element][bit] = 0;
					*/
					if (fitness < 1)break;
					increaseFound = true;
				}

				else { //vecNumere[nr_element] = valoareVeche; 
				       FlipBit(nr_element, bit);
				     }
			}
		}

		if (minFitness < ULTIMATEminFitness)
		{
			//ULTIMATEminHilltop = minHilltop;
			ULTIMATEminFitness = minFitness;
			times = 0;
			//cout << ULTIMATEminFitness;
		} 
		else times++;

		if (times > 100) { 
			cout << "iteratii" << iterations;
			iterations = 10000; 
			
		}
		cout << "iterations: " << iterations << '\n';
		cout << "ultimate min fitness: " << ULTIMATEminFitness << '\n';
	}
	cout << "raspuns: "<<ULTIMATEminFitness<<'\n';
		
}


void Next_Ascent_Hill_Climbing() {

	int i, j, iterations, nr_element, bit, times = 0;
	bool increaseFound;
	long double ULTIMATEminFitness;

	for (iterations = 0; iterations < 100; iterations++)
	{
		nRandArrays();//creaza vecBiti si vecNumere
		minFitness = ComputeFitness();
		if (iterations == 0) ULTIMATEminFitness = minFitness;

		for (bit = 0; bit < nr_biti; bit++)
			for (nr_element = 0; nr_element < n; nr_element++)
			{
				double valoareVeche = vecNumere[nr_element];
				FlipBit(nr_element, bit);
				fitness = ComputeFitness();
				if (fitness < minFitness)
				{
					minFitness = fitness;
					if (vecBiti[nr_element][bit] == 0)//abia acum schimb cu adevarat vecBiti
						vecBiti[nr_element][bit] = 1;
					else vecBiti[nr_element][bit] = 0;
				}
				else { vecNumere[nr_element] = valoareVeche; }
			}


		if (minFitness < ULTIMATEminFitness)
		{
			//ULTIMATEminHilltop = minHilltop;
			ULTIMATEminFitness = minFitness;
			times = 0;
			//cout << ULTIMATEminFitness;
		}
		else times++;
		
		if (times > 500) {
			iterations = 10000;
			//nRandArrays();
		}
	}

	cout << "raspuns: " << ULTIMATEminFitness << '\n';
}

void Simulated_Annealing() {

	double temperature = 100, temperature_step=0.1;
	int i, j, iterations, nr_element, bit, times = 0;
	bool probability;
	double acceptance_probability;
	long double ULTIMATEminFitness;

	nRandArrays();//creaza vecBiti si vecNumere
	minFitness = ComputeFitness();
	ULTIMATEminFitness = minFitness;
	while (temperature > 0)
	{
		for (iterations = 0; iterations < 20; iterations++)
			for (nr_element = 0; nr_element < n; nr_element++)
		{
			double valoareVeche = vecNumere[nr_element];
			bit = randBitPosition();
			cout << bit<<" ";
			FlipBit(nr_element, bit);
			fitness = ComputeFitness();

			if (fitness < minFitness)
			{
				minFitness = fitness;
				if (vecBiti[nr_element][bit] == 0)//abia acum schimb cu adevarat vecBiti
					vecBiti[nr_element][bit] = 1;
				else vecBiti[nr_element][bit] = 0;
			}
			else
			{
				vecNumere[nr_element] = valoareVeche;
				probability = Rand01();
				acceptance_probability = exp((minFitness - fitness) / temperature);
				if (probability < acceptance_probability)
				{
					minFitness = fitness;
					if (vecBiti[nr_element][bit] == 0)//abia acum schimb cu adevarat vecBiti
						vecBiti[nr_element][bit] = 1;
					else vecBiti[nr_element][bit] = 0;
				}
			}

			if (minFitness < ULTIMATEminFitness)
			{
				ULTIMATEminFitness = minFitness;
			}
		}
		temperature = temperature* temperature_step;
	}

	cout << "raspuns: " << ULTIMATEminFitness << '\n';
}

int main() 
{

	int i,j;

	printf("%s\n", "1. De Jong's function 1");
	printf("%s\n", "2. Schwefel's function 7");
	printf("%s\n", "3. Ackley's Path function 10");
	printf("%s\n", "4. Six-hump camel back function");
	printf("%s\n", "Alege o functie: ");
	
	cin >> F;
	
	prec = pow(10, 6);

	cout << "n dimensiuni:  ";
	cin >> n; //n dimensiuni

	switch (F) 
{
	case 1: {  //1. De Jong's function 1
		st = -5.12;
		dr = 5.12;
		nr_biti= SETnr_biti(st, dr, prec);
		break;
	}

	case 2: {  //2. Schwefel's function 7
		st = -500;
		dr = 500;
		nr_biti = SETnr_biti(st, dr, prec);
		break;
	}

	case 3: {  //3. Ackley's Path function 10
		st = -32.768;
		dr = 32.768;
		nr_biti = SETnr_biti(st, dr, prec);
		break;
	}

	case 4: {  //4. Six-hump camel back function
		//-3 <= x1 <= 3, -2 <= x2 <= 2.
		st1 = -3;   st2 = -2;
		dr1 = 3;    dr2 = 2;
		n = 2;
		nr_biti = SETnr_biti(st1, dr1, prec);
		//nr_biti2 = SETnr_biti(st2, dr2, prec);
		break;
	}

}
	
	//cout << "nr_biti"<<nr_biti<<'\n';
	srand(time(NULL));
	
//    Steepest_Ascent_Hill_Climbing();
    Next_Ascent_Hill_Climbing();
	//Simulated_Annealing();
	
	//system("pause");
}

