#include<iostream>
#include<fstream>
#include<cmath>
#include<ctime>

#define NRMAX 50
#define PI 3.14159265
using namespace std;

ofstream fout("hill.out");
ofstream gout("sa.out");

int poz[10000];

struct bitstring
{
	bool bit[10000];
	int length, n;
};

struct sol
{
	double values[50];
};


double HillClimbing(double(*evaluare)(int, sol), double a, double b, int nrp, int d);
double SimulatedAnnealing(double(*evaluare)(int, sol), double a, double b, int nrp, int d);

double HillClimbing_hump(double(*evaluare)(int, sol), double a1, double a2, double b1, double b2, int d);
double SA_hump(double(*evaluare)(int, sol), double a1, double b1, double a2, double b2, int d);

sol decodificare(double a, double b, int nrp, bitstring cod);

bitstring copy(bitstring c2);
bitstring ImproveHill(bitstring c, int nrp, double(*evaluare)(int, sol), double a, double b);
bitstring gen_rand(double a, double b, int nrp, int d);
bitstring ImproveSA(bitstring c, int nrp);

bitstring ImproveHill_hump(bitstring c);
bitstring codificare_hump(double a1, double b1, double a2, double b2, int d);
sol decodificare_hump(double a1, double b1, double a2, double b2, bitstring cod);


double modul(double nr);
double SetT(double T);

double rastrigin(int nrp, sol s);
double rosenbrock(int nrp, sol s);
double griewangk(int nrp, sol s);
double hump(int nrp, sol s);

void afisareHump(double(*algoritm)(double(*evaluare)(int, sol), double a1, double a2, double b1, double b2, int d), double(*evaluare)(int, sol), double a1, double b1, double a2, double b2, int d, int nr_it);
void afisare(double(*algoritm)(double(*evaluare)(int, sol), double a, double b, int nrp, int d), double(*evaluare)(int, sol), double a, double b, int nrp, int d, int nr_it);

//void afisareSA(double(*algoritm)(double(*evaluare)(int, sol), double a, double b, int nrp, int d), int nr_it);

int main()
{
	srand(time(NULL));
	
	/*fout << "Hill Climbing: \n";
	fout << "Rastrigin:\n";
	afisare(HillClimbing, rastrigin, -5.12, 5.12, 5, 6, 30);
	
	fout << "Hill Climbing: \n";
	fout << "Rosenbrock:\n";
	afisare(HillClimbing, rosenbrock, -2.048, 2.048, 10, 5, 1);
	*/
	fout << "Hill Climbing: \n";
	fout << "Griewangk:\n";
	afisare(HillClimbing, griewangk, -600, 600, 30, 5, 1);
	

	/*fout << "Hill Climbing: \n";
	fout << "Six-hump:\n"; 
	afisareHump(HillClimbing_hump, hump, -3, 3, -2, 2, 6, 30);

	fout << "\nSimulated Annealing: \n";
	fout << "Rastrigin:\n";
	afisare(SimulatedAnnealing, rastrigin, -5.12, 5.12, 2, 6, 100);

	fout << "Simulated Annealing: \n";
	fout << "Rosenbrock:\n";
	afisare(SimulatedAnnealing, rosenbrock, -2.048, 2.048, 2, 5, 50);
*/
	fout << "Simulated Annealing: \n";
	fout << "Griewangk:\n";
	afisare(SimulatedAnnealing, griewangk, -600, 600, 30, 5, 1);

	/*fout << "Simulated Annealing: \n";
	fout << "Six-hump:\n";
	afisareHump(SA_hump, hump, -3, 3, -2, 2, 6, 100);*/

	return 0;
}

bitstring gen_rand(double a, double b, int nrp, int d)
{
	bitstring cod;
	int i, k;
	cod.n = ceil(log2(b - a) + d*log2(10));
	cod.length = nrp*cod.n;
	for (i = 0; i < nrp; i++)
	{
		for (k = 0; k < cod.n; k++)
		{
			cod.bit[i*cod.n + k] = rand()*rand()*23 % 2;
		}
	}
	return cod;
}

sol decodificare(double a, double b, int nrp, bitstring cod)
{
	int i, k;
	long long int dec;
	sol solutie;
	for (i = 0; i < nrp; i++)
	{
		dec = 0;
		for (k = 0; k < cod.n; k++)
			dec += (cod.bit[i*cod.n+k] << k);
		solutie.values[i] = a+dec*(b - a) / (pow(2, cod.n) - 1);
	}
	return solutie;
}

double HillClimbing(double (*evaluare)(int, sol), double a, double b, int nrp, int d)
{
	int t, j, i; 
	bool local;
	bitstring bst, vc,vn,vcc;
	sol sol1, sol2, solutie;
	double best, vce, vne, vcce;

	bst = gen_rand(a, b, nrp, d);
	solutie = decodificare(a, b, nrp, bst);
	best= evaluare(nrp, solutie);

	t = 0;
	do
	{
		local = 0;
		i = 0;
		vc = gen_rand(a, b, nrp, d);
		sol1 = decodificare(a, b, nrp, vc);
		vcc=copy(vc);
		vce = evaluare(nrp, sol1);
		do
		{
			vn = ImproveHill(vc, nrp, evaluare, a, b);
			sol2 = decodificare(a, b, nrp, vn);
			vne = evaluare(nrp, sol2);

			if (vne < vce&&i<10)
			{
				cout << vne << '\n';
				vc = copy(vn); i++;
				vce = vne;
				for (j = 0; j < nrp; j++) sol1.values[j] = sol2.values[j];
			}
			else 
				local = true;
		}
		while (!local);
		t++;
		if (vce < best)
		{
			bst = copy(vc);
			best = vce;
			for (j = 0; j < nrp; j++) solutie.values[j] = sol1.values[j];
		}
	} 
	while (t<NRMAX);
	cout << '\n';
	return best;
}

bitstring ImproveHill(bitstring c, int nrp, double(*evaluare)(int, sol), double a, double b)
{
	int i, nr,schimb;
	bitstring c1 = copy(c);
	sol sol1 = decodificare(a, b, nrp, c);
	double vc1, vc = evaluare(nrp, sol1);
	while (1)
	{
		schimb = 0;
		for (i = 0; i < c1.length; i++) poz[i] = 0;
		for (i = 0; i < nrp; i++)
		if (rand()*17 % 27>rand()*19 % 17)
		{
			nr = rand()*rand() % c1.n; schimb = 1;
			c1.bit[i*c1.n + nr] = !c1.bit[i*c1.n + nr]; poz[i*c1.n + nr] = 1;
		}
		if (!schimb) { nr = rand() % c.length; c1.bit[i*c1.n + nr] = !c1.bit[i*c1.n + nr]; poz[i*c1.n + nr] = 1; }
		sol1 = decodificare(a, b, nrp, c1);
		vc1 = evaluare(nrp, sol1);
		if (vc1 < vc)
			return c1;
		else
		{
			for (i = 0; i < c1.length; i++) if (poz[i] == 1) c1.bit[i] = !c1.bit[i];
		}
	}
}

bitstring ImproveSA(bitstring c, int nrp)
{
	int i, nr;
	for (i = 0; i < nrp; i++)
	{
		if (rand()*rand() % 37 > rand() % 37)
		{
			nr = rand()*17 % c.n;
			c.bit[i*c.n + nr] = !c.bit[i*c.n + nr];
		}
	}
	return c;
}

bitstring copy(bitstring c2)
{
	bitstring c;
	c.length = c2.length; c.n = c2.n;
	for (int i = 0; i < c.length; i++)
		c.bit[i] = c2.bit[i];
	return c;
}

double modul(double nr)
{
	if (nr < 0) return -nr;
	return nr;
}

double setT(double T)
{
	double r=0.207;
	return T*r;
}

double rastrigin(int nrp, sol s)
{
	double rez = 10 * nrp;
	for (int i = 0; i < nrp; i++) {
		rez += s.values[i] * s.values[i] - 10 * cos(2 * PI*s.values[i]);
		//cout << s.values[i] << ' ';
	}
	//10·n + sum(x(i) ^ 2 - 10·cos(2·pi·x(i))), i = 1:n; -5.12 <= x(i) <= 5.12.
	return rez;
}

double rosenbrock(int nrp, sol s)
{
	double rez = 0;
	for (int i = 0; i < nrp-1; i++) {
		rez += 100 * pow(s.values[i + 1] - s.values[i] * s.values[i], 2) + pow(1 - s.values[i], 2);
		//cout << s.values[i] << ' ';
	}
	//f2(x)=sum(100·(x(i+1)-x(i)^2)^2+(1-x(i))^2) i = 1:n - 1; -2.048 <= x(i) <= 2.048.
	return rez;
}

double griewangk(int nrp, sol s)
{
	double prod=1, sum=0;
	for (int i = 0; i < nrp; i++)
	{
		sum += s.values[i] * s.values[i]/4000;
		prod *= cos(s.values[i]) / sqrt(i + 1);
	}
	return sum - prod + 1;
	//sum(x(i) ^ 2 / 4000) - prod(cos(x(i) / sqrt(i))) + 1, i = 1:n
		//- 600 <= x(i) <= 600.
}

double hump(int nrp, sol s)
{
	double x, y;
	x = s.values[0]; y = s.values[1];
	return ((4 - 2.1*x*x + pow(x, 4) / 3)*x*x + x * y + (-4 + 4 * y*y)*y*y);
	//fSixh(x1, x2) = (4 - 2.1·x1 ^ 2 + x1 ^ 4 / 3)·x1 ^ 2 + x1·x2 + (-4 + 4·x2 ^ 2)·x2 ^ 2
	//	- 3 <= x1 <= 3, -2 <= x2 <= 2.
}

double SimulatedAnnealing(double(*evaluare)(int, sol), double a, double b, int nrp, int d)
{
	int j, schimb;
	bitstring vc, vn;
	sol sol1, sol2;
	double T, vce, vne, r;

	vc = gen_rand(a, b, nrp, d);
	sol1 = decodificare(a, b, nrp, vc);
	vce = evaluare(nrp, sol1);

	T = rand()%87;
	do
	{
		schimb = 0;
		do
		{
			vn = ImproveSA(vc, nrp);
			sol2 = decodificare(a, b, nrp, vn);
			vne = evaluare(nrp, sol2);
			
			if (vne < vce)
			{
				cout << vne << '\n';
				schimb++;
				vc = copy(vn);
				vce = vne;
				for (j = 0; j < nrp; j++) sol1.values[j] = sol2.values[j];
			}
			else
			{
				r = double(rand()) / double(RAND_MAX);
				if (r < exp(-(modul(vne - vce) / T)))
				{
					schimb++;
					vc = copy(vn);
					vce = vne;
					for (j = 0; j < nrp; j++) sol1.values[j] = sol2.values[j];
				}
			}
		}
		while (schimb<25);
		T = setT(T);
	}
	while (T>0.0000005);
	cout << '\n';
	return vce;
}

void afisare(double(*algoritm)(double(*evaluare)(int, sol), double a, double b, int nrp, int d), double(*evaluare)(int, sol), double a, double b, int nrp, int d, int nr_it)
{
	for (int i = 0; i < nr_it; i++)
		fout << algoritm(evaluare, a, b, nrp, d) << '\n';
	fout << '\n';
}

//six-hump
bitstring codificare_hump(double a1, double b1, double a2, double b2, int d)
{
	bitstring cod;
	int i;
	cod.n=ceil(log2(b1 - a1) + d*log2(10));
	cod.length=cod.n + ceil(log2(b2 - a2) + d*log2(10));
	for (i = 0; i < cod.length; i++)
		cod.bit[i] = rand() * 17 % 2;
	return cod;
}

sol decodificare_hump(double a1, double b1, double a2, double b2, bitstring cod)
{
	int i, k;
	long long int dec;
	sol solutie;
	dec = 0;
	for (k = 0; k < cod.n; k++)
		dec += (cod.bit[k] << k);
	solutie.values[0] = a1 + dec*(b1 - a1) / (pow(2, cod.n) - 1);
	dec = 0;
	for (k = cod.n; k < cod.length; k++)
		dec += (cod.bit[k] << (k-cod.n));
	solutie.values[1] = a2 + dec*(b2 - a2) / (pow(2, cod.length-cod.n) - 1);
	return solutie;
}

double HillClimbing_hump(double(*evaluare)(int, sol), double a1, double b1, double a2, double b2, int d)
{
	int t, j;
	bool local;
	bitstring bst, vc, vn;
	sol sol1, sol2, solutie;
	double best, vce, vne;

	bst = codificare_hump(a1, b1, a2, b2, d);
	solutie = decodificare_hump(a1, b1, a2, b2, bst);
	best = evaluare(2,solutie);

	t = 0;
	do
	{
		local = 0;

		vc = codificare_hump(a1, b1, a2, b2, d);
		sol1 = decodificare_hump(a1, b1, a2, b2, vc);
		vce = evaluare(2, sol1);

		do
		{
			vn = ImproveHill_hump(vc);
			sol2 = decodificare_hump(a1, b1, a2, b2, vn);
			vne = evaluare(2, sol2);

			if (vne < vce)
			{
				vc = copy(vn);
				vce = vne;
				for (j = 0; j < 2; j++) sol1.values[j] = sol2.values[j];
			}
			else
				local = true;
		} while (!local);
		t++;
		if (vce < best)
		{
			bst = copy(vc);
			best = vce;
			for (j = 0; j < 2; j++) solutie.values[j] = sol1.values[j];
		}
	} while (t<NRMAX);
	return best;
}

bitstring ImproveHill_hump(bitstring c)
{
	int nr,ok=0;
	if (rand()*rand() % 17 > rand() * 19 % 27)
	{
		ok = 1;
		nr = rand()*rand() % c.n;
		c.bit[nr] = !c.bit[nr]; 
	}
	if (rand()*rand() % 17 > rand() * 19 % 27)
	{
		ok = 1;
		nr = rand()*rand() % (c.length-c.n)+c.n;
		c.bit[nr] = !c.bit[nr];
	}
	if (!ok)
	{
		nr = rand()*rand() % c.length;
		c.bit[nr] = !c.bit[nr];
	}
	return c;
}

void afisareHump(double(*algoritm)(double(*evaluare)(int, sol), double a1, double a2, double b1, double b2, int d), double(*evaluare)(int, sol), double a1, double b1, double a2, double b2, int d, int nr_it)
{
	for (int i = 0; i < nr_it; i++)
		fout << algoritm(evaluare, a1, b1, a2, b2, d) << '\n';
	fout << '\n';
}

double SA_hump(double(*evaluare)(int, sol), double a1, double b1, double a2, double b2, int d)
{
	int j, schimb;
	bitstring vc, vn;
	sol sol1, sol2;
	double T, vce, vne, r;

	vc = codificare_hump(a1, b1, a2, b2, d);
	sol1 = decodificare_hump(a1, b1, a2, b2, vc);
	vce = evaluare(2, sol1);

	T = rand() % 87;
	do
	{
		schimb = 0;
		do
		{
			vn = ImproveHill_hump(vc);
			sol2 = decodificare_hump(a1, b1, a2, b2, vn);
			vne = evaluare(2, sol2);


			if (vne < vce)
			{
				schimb++;
				vc = copy(vn);
				vce = vne;
				for (j = 0; j < 2; j++) sol1.values[j] = sol2.values[j];
			}
			else
			{
				r = double(rand()) / double(RAND_MAX);
				if (r < exp(-(modul(vne - vce) / T)))
				{
					schimb++;
					vc = copy(vn);
					vce = vne;
					for (j = 0; j < 2; j++) sol1.values[j] = sol2.values[j];
				}
			}
		} while (schimb<25);
		T = setT(T);
	} while (T>0.0000005);
	return vce;
}


/*void afisareSA(double(*algoritm)(double(*evaluare)(int, sol), double a, double b, int nrp, int d), int nr_it)
{
	gout << "Rastrigin\n";
	for (int i = 0; i < nr_it; i++)
		gout << algoritm(rastrigin, -5.12, 5.12, 2, 7) << '\n';
	gout << '\n';
	gout << "Rosenbrock\n";
	for (int i = 0; i < nr_it; i++)
		gout << algoritm(rosenbrock, -2.048, 2.048, 2, 5) << '\n';
	gout << '\n';
	gout << "Griewngk\n";
	for (int i = 0; i < nr_it; i++)
		gout << algoritm(griewangk, -600, 600, 2, 5) << '\n';
	gout << '\n';
	gout << "Six-hump\n";
	for (int i = 0; i < nr_it; i++)
		gout << algoritm(hump, -2, 2, 2, 6) << '\n';
	fout << '\n';
}*/